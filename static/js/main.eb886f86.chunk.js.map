{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","setCollapsed","setState","collapsed","state","this","props","event","summary","location","start","htmlLink","description","className","href","target","onClick","React","Component","EventList","events","map","id","CitySearch","handleInputChange","e","value","suggestions","locations","filter","toUpperCase","indexOf","toLowerCase","query","handleItemClicked","suggestion","type","onChange","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOAuCeA,E,kDApCd,aAAe,IAAD,8BACb,gBAMDC,aAAe,WACd,EAAKC,SAAS,CAAEC,WAAW,KAN3B,EAAKC,MAAQ,CACZD,WAAW,GAHC,E,0CAWd,WACC,IAAQA,EAAcE,KAAKD,MAAnBD,UACR,EACCE,KAAKC,MAAMC,MADJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,YAE5C,OACC,sBAAKC,UAAU,QAAf,UACC,oBAAIA,UAAU,UAAd,SAAyBL,IACzB,mBAAGK,UAAU,WAAb,SAAyBJ,IACzB,mBAAGI,UAAU,aAAb,SAA2BH,IACzBP,EAMD,6BALA,sBAAKU,UAAU,YAAf,UACC,mBAAGC,KAAMH,EAAUI,OAAO,WAC1B,mBAAGF,UAAU,cAAb,SAA4BD,OAK9B,wBAAQI,QAASX,KAAKJ,aAAcY,UAAU,cAA9C,SACEV,EAAY,eAAiB,wB,GA9Bfc,IAAMC,WCaXC,MAZf,YAA8B,IAAVC,EAAS,EAATA,OAClB,OACE,oBAAIP,UAAU,YAAd,SACGO,EAAOC,KAAI,SAAAd,GAAK,OACf,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADPA,EAAMe,UC8CRC,E,kDAlDd,aAAe,IAAD,8BACb,gBAODC,kBAAoB,SAAAC,GACnB,IAAMC,EAAQD,EAAEV,OAAOW,MACjBC,EAAc,EAAKrB,MAAMsB,UAAUC,QAAO,SAAApB,GAC/C,OAAOA,EAASqB,cAAcC,QAAQL,EAAMM,gBAAkB,KAE/D,EAAK9B,SAAS,CAAE+B,MAAOP,EAAOC,iBAbjB,EAgBdO,kBAAoB,SAAAC,GACnB,EAAKjC,SAAS,CACb+B,MAAOE,KAhBR,EAAK/B,MAAQ,CACZ6B,MAAO,GACPN,YAAa,IAJD,E,0CAsBd,WAAU,IAAD,OACR,EAA+BtB,KAAKD,MAA5B6B,EAAR,EAAQA,MAAON,EAAf,EAAeA,YACf,OACC,sBAAKd,UAAU,aAAf,UACC,uBACCuB,KAAK,OACLvB,UAAU,OACVS,GAAG,OACHI,MAAOO,EACPI,SAAUhC,KAAKmB,oBAEhB,qBAAIX,UAAU,cAAd,UACEc,EAAYN,KAAI,SAAAc,GAAU,OAC1B,oBAECnB,QAAS,kBAAM,EAAKkB,kBAAkBC,IAFvC,SAGEA,GAFIA,MAKP,6BACC,gDADO,iB,GA1CYlB,IAAMC,WCYhBoB,MATf,WACE,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGc0B,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.eb886f86.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Event extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcollapsed: true,\r\n\t\t};\r\n\t}\r\n\r\n\tsetCollapsed = () => {\r\n\t\tthis.setState({ collapsed: false });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { collapsed } = this.state;\r\n\t\tconst { summary, location, start, htmlLink, description } =\r\n\t\t\tthis.props.event;\r\n\t\treturn (\r\n\t\t\t<div className='event'>\r\n\t\t\t\t<h1 className='summary'>{summary}</h1>\r\n\t\t\t\t<p className='location'>{location}</p>\r\n\t\t\t\t<p className='start-date'>{start}</p>\r\n\t\t\t\t{!collapsed ? (\r\n\t\t\t\t\t<div className='more-info'>\r\n\t\t\t\t\t\t<a href={htmlLink} target='_blank' />\r\n\t\t\t\t\t\t<p className='description'>{description}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<></>\r\n\t\t\t\t)}\r\n\t\t\t\t<button onClick={this.setCollapsed} className='details-btn'>\r\n\t\t\t\t\t{collapsed ? 'More Details' : 'Hide Details'}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Event;\r\n","import React from 'react'\r\nimport Event from './Event'\r\n\r\nfunction EventList({events}) {\r\n  return (\r\n    <ul className='EventList'>\r\n      {events.map(event => \r\n        <li key={event.id}>\r\n          <Event event={event}/>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default EventList\r\n","import React from 'react';\r\n\r\nclass CitySearch extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tquery: '',\r\n\t\t\tsuggestions: [],\r\n\t\t};\r\n\t}\r\n\r\n\thandleInputChange = e => {\r\n\t\tconst value = e.target.value;\r\n\t\tconst suggestions = this.props.locations.filter(location => {\r\n\t\t\treturn location.toUpperCase().indexOf(value.toLowerCase()) > -1;\r\n\t\t});\r\n\t\tthis.setState({ query: value, suggestions });\r\n\t};\r\n\r\n\thandleItemClicked = suggestion => {\r\n\t\tthis.setState({\r\n\t\t\tquery: suggestion,\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { query, suggestions } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className='CitySearch'>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tclassName='city'\r\n\t\t\t\t\tid='city'\r\n\t\t\t\t\tvalue={query}\r\n\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<ul className='suggestions'>\r\n\t\t\t\t\t{suggestions.map(suggestion => (\r\n\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tkey={suggestion}\r\n\t\t\t\t\t\t\tonClick={() => this.handleItemClicked(suggestion)}>\r\n\t\t\t\t\t\t\t{suggestion}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<li key='all'>\r\n\t\t\t\t\t\t<b>See all cities</b>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CitySearch;\r\n","import React from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySearch/>\n      <EventList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}